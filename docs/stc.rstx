====================
The GAVO STC Library
====================

.. contents:: 
  :depth: 2
  :backlinks: entry
  :class: toc


A library to process VO STC specifications
========================================================================

This library aims to ease processing specifications of space-time
coordindates (STC) according to the IVOA STC data model with the XML and
string serializations.  Note that it is at this point an early beta at
best.  To change this, I welcome feedback, even if it's just "I'd need X
and Y".

More specifically, the library is inteded to help in:

* supporting ADQL region specifications and conforming them
* generating registry coverage specifications from simple STC-S

As the dust settles around embedding STC in VOTable, we will support
this as well.

The implementation should conform to STC-S 1.33.

Installation
------------

If you are running a Debian-derived distribution, see `Adding the GAVO
repository to your sources`_.  When you follow that recipe,

::

  aptitude install python-gavostc

is enough.

Otherwise, you will have to install the source distribution.  Unpack the
.tar.gz and run::

  python setup.py install

You will normally need to do this as root for a system-wide
installation.  There are, however, alternatives, first and foremost a
`virtual python`_ that will keep your managed directories clean.

This library's setup is based on setuptools.  Thus, it will generally
obtain all necessary dependencies from the net.  For this to be
successful, you will have net access.

If all this bothers you, contact the authors.


Usage
-----

Command Line
''''''''''''

For experiments, we provide a simple command line tool.  Try::

  gavostc help

so see what operations we expose through the command line tool.


Programmatic
''''''''''''

The library is written in python, and thus currently can only be
operated from python programs.  It should not be too hard to embed it
into C or even Java programs.  If you have such needs, contact the
author.

See API_ for details.


Limitations
-----------

* External references (xlink:href and friends) and "STClib" are not supported
  (this will be changed soon).
* On system transformations, ellipses are not rotated, just moved.  No
  "wiggles" (errors, etc) are touched at all (this will be fixed soon).
* Reference positions are not supported in any meaningful way.  In
  particular, when transforming STCs, transformations between all
  reference positions are identities.  This won't hurt much for galactic
  or extragalactic objects but of course makes the whole thing useless
  for solar-system work.  I'm willing to put some work into this if
  there's any demand.
* The behaviour of some transforms (in particular FK5<->FK4) close to
  the poles need some attention.
* Empty coordinate values (e.g., 2D data with just one coordinate) are not
  really supported.  Processing them will, in general, work, but will,
  in general, not yield the expected result.  This is fixable, but may
  require changes in the data model.
* No generic coordinates.  Those can probably be added relatively
  easily, but it would definitely help if someone had a clear use case
  for them
* Spectral errors and their "wiggles" (error, size, etc) must be in the
  same "flavor", i.e., either frequency, wavelength, or energy.  If they
  are not, the library will silently fail.  This is easily fixable,
  but there's too much special casing in the code as is, and I consider
  this a crazy corner case no one will encounter.
* No reference on posAngles, always assumed to be 'X'.
* Spatial intervals are system-conformed analogous to geometries, so any
  distance information is disregaded.  This will be fixed on request.
* No support for Area.
* Frame handling currently is a big mess; in particular, the system
  changing functions *assume* that the frames on positions, velocities and
  geometries are identical.  I'll probably more towards requiring
  astroCoords being in astroSystem.


Extensions to STC-S
-------------------

* After ECLIPTIC, FK4, or FK5, an equinox specification is allowed.  This is 
  either J<number> or B<number>.
* For velocities, arbitrary combinations of spaceUnit/timeUnit are
  allowed.

Other Deviations from the Standard
----------------------------------

* Units on geometries default to deg, deg when parsing from STC-X.
* The equinox to be used for ECLIPTIC isn't quite clear from the specs.
  The library will use a specified equinox if given, else the time value
  if given, else the equinox will be None (which probably is not
  terribly useful).

Bugs
----

* Conversions between TT and TCB are performed using the rough
  approximation of the explanatory supplement rather than the more
  exact expression.
* TT should be extended to ET prior to 1973, but this is not done yet.


API
---

The public API to the STC library is obtained by::

  from gavo import stc

This is assumed for all examples below.


The Data Model
''''''''''''''

The STC library turns all input into an itermediate data structure
called an AST.  This is a tree containing the STC information and is
still following the STC data model quite closely.  However, it turned
out that it is quite inconvenient to work with, so we will probably
change it after we've gathered some experience.  The most intrusive
change will probably be that the separation between data and metadata
will be enforced much more strictly, i.e., unit, error and such will go
from the positions to what is now the frame object.

Thus, we don't document the data model fully yet.  The gory details are
in dm.py.  Meanwhile, we will try to maintain the following properties:

* All objects in ASTs are considered immutable, i.e., nobody is supposed to
  change them once they are constructed.
* An AST object has attributes time, place, freq, redshift, velocity
  refererring to an objects containing the values of the respective
  quantities or None if not given
* An AST object has attributes timeAs, areas, freqAs, redshiftAs,
  velocityAs containing sequences of intervals or geometries of the
  respective quanities.
* 

Parsing STC-X
'''''''''''''

To parse an STC-X document, use ``stc.parseSTCX(literal) -> AST``.
Thus, you pass in a string containing STC-X and receive a AST structure.

Since STC documents should in general be rather small, there should be
no necessity for a streaming API.  If you want to read directly from a
file, you could use something like::

  def parseFromFile(fName):
    f = open(fName)
    stcxLiteral = f.read()
    f.close()
    return stc.parseSTCX(stcxLiteral)

The return value is a sequence of pairs of ``(tagName, ast)``, where
tagName is the namespace qualified name of the root element of the STC
element.  The tagName is present since multiple STC trees may be present
in one STC-X document.  The qualification is in standard W3C form, i.e.,
``{<namespace URI>}<element name>``.  If you do not care about
versioning (and you should not need to with this library), you could
find a specific element using a construct like::

  def getSTCElement(literal, elementName):
    for rootName, ast in stc.parseSTCX(literal):
      if rootName.endswith('}'+elementName):
        return ast
  getSTCElement(open("M81.xml").read(), "ObservationLocation")

Note that the STC library does not contain a validating parser.  Invalid
STC-X documents will at best give you rather incomprehensible error
messages, at worst an AST that has little to do with what was in the
document.  If you are not sure whether the STC-X you receive is valid,
run a schema validator before parsing.

We currently understand a subset of STC-X that matches the
expressiveness of STC-S.  Most STC-X features that cannot be mapped in
STC-X are silently ignored.



.. `Adding the GAVO repository to your sources`: http://vo.ari.uni-heidelberg.de/docs/repository.html
