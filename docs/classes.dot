digraph G { 
	overlap="scale";
	orientation="protrait";
	rank="sink";
	rankdir="LR";
	size="8,11";

subgraph cluster_resourcebased {
	label = "web.resourcebased";
	Form;
	GavoFormMixin;
	ResourceBasedRenderer -> DataBasedRenderer;
	ResourceBasedRenderer -> ServiceBasedRenderer;
	VoTableResponse;
	HtmlResponse;
	BaseResponse -> HtmlResponse;
	BaseResponse -> VoTableResponse;
	ServiceBasedRenderer -> BaseResponse;
	Form;
	GavoFormMixin -> Form;
	ServiceBasedRenderer -> Form;
}

subgraph cluster_runner {
	label = "web.runner";
	StreamingRunner;
	StdioProtocol;
}

subgraph cluster_protocol {
	label = "twisted.protocol";
	ProcessProtocol -> StreamingRunner;
	ProcessProtocol -> StdioProtocol;
}

subgraph cluster_scs {
	label = "web.scs";
	ScSCondition -> HumanScSCondition;
}

subgraph cluster_service {
	label = "web.service";
	TableContainer;
	Service;
}

subgraph cluster_siap {
	label = "web.siap";
	SiapCondition;
	SiapCutoutCore;
}


subgraph "cluster_web.common" {
	label = "web.common";
	CustomErrorMixin;
	GavoRenderMixin;
	QueryMeta;
	CoreResult;
	CustomTemplateMixin;
}

subgraph cluster_core {
	label = "web.core";
	Core;
}

subgraph cluster_dispatcher {
	label = "web.dispatcher";
	ErrorPageDebug -> ErrorPage;
	ArchiveService;
}

subgraph cluster_gwidgets {
	label = "web.gwidgets";
	OutputOptins;
	DbOptions;
	FormalDict;
	SimpleSelectChoice;
	MultichoiceBase -> MultiselectChoice -> SimpleMultiSelectChoice;
}

subgraph cluster_htmltable {
	label = "web.htmltable";
	FormatterFactory;
	HtmlTableFragment;
}

subgraph cluster_product {
	label = "web.product";
	Product;
}

subgraph cluster_standardcores {
	label = "web.standardcores";
	CondDesc;
	CondDesc -> CondDescFromRd;
	QueryingCore;
	ComputedCore;
	QueryingCore -> DbBasedCore;
	DbBasedCore;
}

subgraph cluster_uploadservice {
	label = "web.uploadservice";
	UploadCore;
	Uploader -> MachineUploader;
}

subgraph cluster_vizierexprs {
	label = "web.vizierexprs";
	ParseNode -> NumericNode;
	ParseNode -> StringNode;
}

subgraph cluster_vodal {
	label = "web.vodal";
	DalRenderer -> ScsRenderer;
	DalRenderer -> SiapRenderer;
}

subgraph cluster_columngrammar {
	label = "parsing.columngrammar";
	ColumnExtractor;
	ColumnGrammar;
}

subgraph cluster_parsing_conditions {
	label = "parsing.conditions";
	Constraints;
	Constraint;
	_Condition -> _PreterminalNotEqualCondition;
	_Condition -> _PreterminalPresentCondition;
}

subgraph cluster_contextgrammar {
	label = "parsing.contextgrammar";
	InputKey;
	ContextGrammar;
}

subgraph cluster_dictlistgrammar {
	label = "parsing.dictlistgrammar";
	DictlistGrammar;
}

subgraph cluster_fitsgrammar {
	label = "parsing.fitsgrammar";
	FitsGrammar;
}

subgraph cluster_rowsetgrammar {
	label = "parsing.rowsetgrammar";
	RowsetGrammar;
}

subgraph cluster_tablegrammar {
	label = "parsing.tablegrammar";
	TableGrammar;
}


subgraph cluster_kvgrammar {
	label = "parsing.kvgrammar";
	KeyValueGrammar;
}

subgraph cluster_nullgrammar {
	label = "parsing.nullgrammar";
	NullGrammar;
}

subgraph cluster_regrammar {
	label = "parsing.regrammar";
	REGrammar;
}


subgraph cluster_grammar {
	label = "parsing.grammar";
	Grammar;
}

subgraph cluster_importparser {
	label = "parsing.importparser";
	RdParser;
	InputEntityResolver;
}

subgraph cluster_macros {
	label = "parsing.macros";
	Macro -> EquatorialPositionConverter;
	Macro -> PmCombiner;
	Macro -> LotsOfOthers;
}

subgraph cluster_meta {
	label = "parsing.meta";
	InfoItem;
	MetaItem;
	MetaMixin;
}

subgraph cluster_parsehelpers {
	label = "parsing.parsehelpers";
	RowFunction;
	RDComputer -> FieldComputer;
}

subgraph cluster_processors {
	label = "parsing.processors";
	RowProcessor -> RowExpander;
	RowProcessor -> DateExpander;
	RowProcessor -> CommaExpander;
}

subgraph cluster_resource {
	label = "parsing.resource";
	Semantics;
	RecordDef;
	ParseContext;
	DataSet -> InternalDataSet;
	SqlMacroExpander;
	Resource;
	ResourceDescriptor;
	DataDescriptor;
}
	
subgraph cluster_typeconversion {
	LiteralParser;
}
	

subgraph cluster_record {
	Record;
}

subgraph cluster_datadef {
	label = "datadef";
	DataField -> OutputField;
	DataTransformer;
	Values;
}

subgraph cluster_formal {
	label = "nevow formal";
	ResourceMixin;
}

subgraph "cluster_nevow.rend" {
	label = "nevow rend";
	Page;
	Fragment;
}


	CustomErrorMixin -> SiapRenderer;
	Form -> SiapRenderer;
	GavoFormMixin -> 	Form;
	ServiceBasedRenderer -> 	Form;
	ResourceMixin -> 	GavoFormMixin;
	GavoRenderMixin -> 	ResourceBasedRenderer;
	Page -> 	ResourceBasedRenderer;
	CustomTemplateMixin -> 	ResourceBasedRenderer;

	Page -> ErrorPageDebug;
	CustomTemplateMixin -> ArchiveService;
	GavoRenderMixin -> ArchiveService;
	Page -> ArchiveService;

	Fragment -> HtmlTableFragment;

	DbBasedCore -> Product;

	Record -> CondDesc;
	Record -> Core;

	Core->QueryingCore;
	Core->ComputedCore;

	CondDesc -> ScSCondition;

	Record -> Service;
	MetaMixin -> Service;

	CondDesc -> SiapCondition;
	DbBasedCore -> SiapCutoutCore;

	QueryingCore -> UploadCore;
	Form -> Uploader;
	CustomErrorMixin -> MachineUploader;

	CustomErrorMixin -> DalRenderer;
	Form -> DalRenderer;

	Grammar -> ColumnGrammar;
	Grammar -> ContextGrammar;
	Grammar -> DictlistGrammar;
	Grammar -> FitsGrammar;
	Grammar -> KeyValueGrammar;
	Grammar -> NullGrammar;
	Grammar -> REGrammar;
	Grammar -> RowsetGrammar;
	Grammar -> TableGrammar;

	DataField -> InputKey;

	NodeBuilder -> RdParser;

	RowFunction -> Macro;
	RowFunction -> RowProcessor;

	Record -> Semantics;
	Record -> RecordDef;
	MetaMixin -> RecordDef;
	MetaMixin -> DataSet;
	Record -> ResourceDescriptor;
	MetaMixin -> ResourceDescriptor;
	DataTransformer -> DataDescriptor;

	Record -> DataField;
	Record -> DataTransformer;
	MetaMixin -> DataTransformer;
	Record -> Values;
}
