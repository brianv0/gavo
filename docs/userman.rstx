==================================
GAVO python software user's manual
==================================

python-gavo is a package containing support code and a couple of entry
points (i.e., user-visible scripts) for building and running servers
with astronomical data ("VO nodes").

Installation
============

The preferred way to run python-gavo is on a dpkg-based system (apt-get
yaddayadda).

If this is not an option for you, you can install python-gavo based on
easy_install.  You first need a working python installation that can
build python extensions.  If you installed python yourself and have a C
compiler, that should already be the case, on some distributions you
need packages like python-dev, python-devel or somesuch installed in
addition to the binary python.  Once you have that, get the source
tar.gz, unpack it somewhere, cd into resulting directory and then say

::

  sudo python setup.py install

(there are various options to get the stuff installed when you're not
root; refer to the `setuptools
documentation <http://peak.telecommunity.com/DevCenter/EasyInstall>`_ if
necessary).

Setup
=====

The tools want a "root directory" for GAVO, a directory in which the
sources reside, ancillary data is kept, etc.  By default, this is
``/var/gavo``.  If you want something else, set the environment variable
``$GAVO_HOME``.

The tools will write a log (by default ``$GAVO_HOME/logs/gavoops``).  It
may be a good idea to keep that log on a local file system and not share
it with other instances, not the least because we do not provide for any
kind of locking on that file.  To do that, set the environment variable
GAVO_LOGDIR to a directory you want the logs in.  That directory should,
of course, only be writable by you.

To make things work, you will also need to set up a database and create
at least one Settings_ file.

Settings
========

Most operations will eventually lead to database accesses.  The tools
will get access information from a gavosettings file.  By default, it is
searched in ``$HOME/.gavosettings`` (or ``/no_home/.gavosettings`` if
``HOME`` is not defined).  You can override the path to this file via
the environment variable GAVOSETTINGS.

This file contains ini-style configuration, i.e., sections (in square
brackets) or key-value pairs.  Currently, there is only one section, db.
Within that section, you can set

* dsn -- the "path" to the database, in the format <host>:<port>:<db>.
  Example: ``ara.ari.uni-heidelberg.de:5432:test``
* user -- the user through which the db is accessed.  Example:
  ``msdemlei``
* password -- the password of user.  Example: ``mySecretPassword``
* allRoles -- a comma seperated list of database user ids that will get
  all privileges on newly created schemas and tables.  Example:
  ``msdemlei, admin1, ustampa``.
* readRoles -- a comma seperated list of database user ids that will
  get usage/read access on newly created schemas and tables.  Example:
  ``gavo,op0``

A gavosettings file that sets all mentioned parameters would then look
like this:

::

  [db]
  dsn: serpens:5432:test
  user: msdemlei
  password: mySecretPassword
  allRoles: msdemlei, admin1, ustampa
  readRoles: gavo,op0


Importing a resource
====================

To import a resource into the database, you should first make a
subdirectory of your gavo inputs directory (GAVO_HOME/inputs).  The
recommended layout within this directory is:

* res/ -- a directory containing the resource descriptor plus
  additional metadata (like mapping files), if applicable
* bin/ -- if applicable, a directory containing code that may be needed
  for preprocessing and the like.  Use with care and provide explanatory
  make targets.
* <anything convenient>/ -- directory containing input source file(s)
* Makefile -- a makefile with at least one target, update, that
  rebuilds the tables generated by this resoure (details pending).
* README -- a short description of the source: what it is, where it came
  from, etc.

After unpacking the raw data, you need to come up with a resource
descriptor.  More on this below.  Once you have that, call

::

  gavoimp <path-to-rd>

do start parsing and uploading the data.

You can give gavoimp a couple of options; see ``gavoimp --help``.

.. vi:et:tw=72:
