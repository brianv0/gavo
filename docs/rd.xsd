<?xml version="1.0" encoding="iso-8859-1"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema">

	<xsd:annotation>
		<xsd:documentation xml:lang="en">
			The specification for GAVO resource descriptors.

			If you don't speak schema, use the comments.

			Since the annotation element is quite verbose, I've used xml
			comments for now.  Those that should become annotations are
			marked with a asterisk.  They should be transformed into
			annotation/documentation elements in place or, if immediately
			following an empty element, within that element.
		</xsd:documentation>
	</xsd:annotation>

	<xsd:element name="ResourceDescriptor" type="RdType"/>

	<xsd:complexType name="RdType">
		<!--* The root element.  
		-->
		<xsd:sequence>
			<xsd:element name="schema" type="xsd:string"/>
				<!--* gives the database schema the tables should be created in.
				If missing, the public schema will be used. -->
			<xsd:element name="Data" type="DataType" minOccurs="1" 
				maxOccurs="unbounded"/>
			<xsd:element name="script" type="ScriptType" minOccurs="0"
				maxOccurs="unbounded"/>
				<!--* contains raw SQL to be executed in order of appearance
				of the elements after the resource has been imported. -->
			<xsd:element name="recreateAfter" type="DependType" minOccurs="0"
				maxOccurs="unbounded"/>
				<!--* contains the srcdir of another resource (as inputsDir-relative
				name) that should be recreated after the resource has been imported.
				-->
		</xsd:sequence>
		<xsd:attribute name="srcdir" type="xsd:string"/>
		<!--* is an inputsDir-relative path (should be a name only) that
		is the root of most further path specifications -->
	</xsd:complexType>

	<xsd:complexType name="DataType">
		<!--* is a descriptor for the data coming from one source.
		-->
		<xsd:sequence>
			<xsd:choice>
				<xsd:element name="CFGrammar" type="CFGrammarType"/>
				<xsd:element name="REGrammar" type="REGrammarType"/>
				<xsd:element name="FitsGrammar" type="FitsGrammarType"/>
				<xsd:element name="KeyValueGrammar" type="KeyValueGrammarType"/>
				<xsd:element name="NullGrammar" type="NullGrammarType"/>
			</xsd:choice>
				<!--* the grammar used to parse the source file. -->
			<xsd:element name="Semantics" type="SemanticsType"/>
				<!--* the semantics used to interpred the parsed results. -->
		</xsd:sequence>
		<xsd:attribute name="sourcePat"/>
			<!--* a shell pattern to identify the sources to be parsed -->
		<xsd:attribute name="source"/>
		<xsd:attribute name="id"/>
		<xsd:attribute name="encoding" default="iso-8859-1"/>
	</xsd:complexType>

	<xsd:complexType name="GrammarType" abstract="true">
		<xsd:sequence>
			<xsd:element name="Macro" type="MacroType" maxOccurs="unbounded"/>
			<xsd:element name="macrodef" type="MacrodefType" maxOccurs="unbounded"/>
			<!-- XXX TODO: row processors -->
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="NullGrammarType">
		<xsd:complexContent>
			<xsd:extension base="GrammarType"/>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="KeyValueGrammarType">
		<xsd:complexContent>
			<xsd:extension base="GrammarType"/>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="FitsGrammarType">
		<xsd:complexContent>
			<xsd:extension base="GrammarType">
				<xsd:attribute name="qnd" type="xsd:string"/>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="RuleGrammarType" abstract="true">
		<xsd:complexContent>
			<xsd:extension base="GrammarType">
				<xsd:sequence>
					<xsd:element name="rules" type="xsd:string"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="REGrammarType">
		<xsd:complexContent>
			<xsd:extension base="RuleGrammarType">
				<xsd:sequence>
					<xsd:element name="tokenizer" type="TokenizerType"/>
					<xsd:element name="tokenSequence" type="xsd:string"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="CFGrammarType">
		<xsd:complexContent>
			<xsd:extension base="RuleGrammarType">
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="ScriptType">
		<xsd:complexContent>
			<xsd:extension base="xsd:anyType"/>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="DependType">
		<xsd:complexContent>
			<xsd:extension base="xsd:anyType"/>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="MacroType">
		<xsd:complexContent>
			<xsd:extension base="xsd:anyType"/>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="MacrodefType">
		<xsd:complexContent>
			<xsd:extension base="xsd:anyType"/>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="TokenizerType">
		<xsd:complexContent>
			<xsd:extension base="xsd:anyType"/>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="SemanticsType">
		<xsd:complexContent>
			<xsd:extension base="xsd:anyType"/>
		</xsd:complexContent>
	</xsd:complexType>

</xsd:schema>
