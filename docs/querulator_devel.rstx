=================================
The Querulator -- developer notes
=================================

The querulator is a tool for rapid construction of web services over
(astronomical) data bases.


Query Flow
----------

Queries are accepted by the server interface.  Currently, that's a CGI
web/querulator.py.  It is responsible for building a Context instance
(gavo/web/querulator/context.py) -- this part should be the only thing
that changes when the access method changes.

Querulator.py then dispatches the query based on the REQUEST_PATH.
Usually, this will lead to the construction of a Template instance
(defined in gavo/web/querulator/forms.py), during which the embedded SQL
will be parsed.  The template is then passed on the the actual query
handler, which typically resides in gavo/web/querulator/queryrun.

When generating an HTML form, the template's asHtml method is used.  It,
in turn, asks all nodes created during SQL parsing to return HTML for
their form elements.  This is mostly trivial, except for the actual
(processed) conditions, which are instances of condgens.CondGen and
return the HTML for the form.

When responding to a query, the template's asSql method is used, which
again calls the asSql methods of the nodes in the SQL statement's parse
tree.  This time, any CondGens that find their keys produce SQL, all
others produce empty strings.  CondGens may, at this point, process the
actual input values.
The query is only ran by the handlers (_formatAsHtml,
_formatAsTar etc.) that may add additional select items or conditions
(e.g. for rights management), format the result and return it to the
web framework.


Contexts
--------

A context a a class that is passed around and contains all information
the services need to know about the environment -- in other words, apart
from context.py, nothing in gavo/web/querulator should have any
knowledge of the interface used to query the database.  This means that
at some point, the DB connection should be moved into context (since we
don't need to open it each time we're called when we're persistent).

.. vi:et:tw=72:
