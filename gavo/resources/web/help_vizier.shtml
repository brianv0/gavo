<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
	"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Help: Vizier-like expressions</title>
<link rel="stylesheet" type="text/css"
	href="__site_path__/builtin/css/gavo_dc.css"/>
</head>
<body>
<h1>Help on Vizier-like expressions</h1>
<p>The GAVO archive supports search expressions modelled after <a href="http://vizier.u-strasbg.fr/cgi-bin/Help?VizieR/syntax">what 
CDS' Vizier service provides</a>.  Our implementation is not yet complete. 
If you need a given feature, please let us know.</p>

<p>The rough idea is that you can specify
the values you search for with certain operators, depending on the type
of the field you are matching against.</p>

<h2><a name="floats">Vizier-like expressions for numeric values</a></h2>
<h3>Overview</h3>
<p>For numeric expressions, you can use the following operators:</p>
<ul>
<li>No operator: this is equivalent to =.</li>
<li>Comparisons: The operators &lt;, &lt;=, >, >=, =, != are prefixed
and behave like their mathematical counterparts.</li>
<li>Enumeration: You can enumerate values you are interested in using
the comma (",") operator.</li>
<li>Range: To specify a range of acceptable values, use the ".." operator.
Note that you must surround this operator with whitespace; alternatively,
you can give "value and error" with the "+/-" operator.</li>
<li>Logical operators: The operators ! (not), &amp; (and), and | (or) provide
simple logic.  The precendence is in the given sequence.  If you need to do 
fancy things here, contact us and we will add support for grouping (parentheses)
</li>
</ul>

<h3>Examples</h3>
<ul>
<li><code>50</code> or <code>=50</code> -- select only values exactly 50</li>
<li><code>!=50</code> -- select only values different from 50</li>
<li><code>&lt; 60.0</code>; <code>> 4e-8</code>; <code>&gt;= -.5</code>;
<code>&lt;= -5.e13</code> -- selects values smaller, greater, greater or 
equal to their operands.</li>
<li><code>50. .. 80.5</code> -- selects values between 50 and 80.5 inclusive.</li>
<li><code>50 +/- 10</code> -- selects values between 40 and 60 inclusive.</li>
<li><code>40, 50, 50.5, 60</code> -- select any of the enumerated values.</li>
<li><code>!40, 50, 50.5, 60</code> -- select anything other than the enumerated values.</li>
<li><code>40 | 100 +/- 5</code> -- select values equal to 40 or between 95 and 105.</li>
</ul>

<h3>Grammar</h3>
<p>For those into such things, here is the grammar we currently use to parse
numeric expressions (the base nonterminal is expr).

<pre>
	preOp    ::= "=" |  ">=" | ">" | "<=" | "<"
	rangeOp  ::= ".."
	pmOp     ::= "+/-" | "\xb1"  (this is the &#xb1; character)
	orOp     ::= "|"
	andOp    ::= "&"
	notOp    ::= "!"
	commaOp  ::= ","

	preopExpr  ::= [preOp]  floatLiteral
	rangeExpr  ::= floatLiteral rangeOp  floatLiteral
	valList    ::= floatLiteral { commaOp floatLiteral }
	pmExpr     ::= floatLiteral pmOp floatLiteral
	simpleExpr ::= rangeExpr | pmExpr | valList | preopExpr

	notExpr    ::= [notOp] simpleExpr
	andExpr    ::= notExpr {andOp + notExpr}
	expr       ::= andExpr {orOp + expr}
</pre>

<p>floatLiteral is a usual C decimal integer or float literal.</p>


<h2><a name="dates">Vizier-like expressions for dates</a></h2>

<h3>Overview</h3>

<p>Dates support the same operators as <a href="#floats">numeric operands</a>,
except that the "error" in expressions with +/- is a simple float.  Dates
are <em>always</em> in ISO format, i.e., YYYY-MM-DD.  Time specifications are
not yet supported.</p>

<h3>Examples</h3>

<p>See also the examples for <a href="#float">numeric expressions</a>.</p>

<ul>
<li><code><2003-04-06</code> -- select values earlier than 
April 6th, 2003.</li>
<li><code>2003-04-06 +/- 4</code> -- select values four days around 
April 6th, 2003.</li>
</ul>

<h3>Grammar</h3>

<p>The grammar is identical to the one of <a href="#float">numeric 
expressions</a>, except that floatLiteral is dateLiteral with the exception 
of pmExpr that is</p>
<pre>
pmExpr := dateLiteral pmOp floatLiteral</pre>
<p>here.  The dates themselves currently follow the regular expression 
<code>[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]</code>.  This will
be relaxed in the future.</p>

<h2><a name="strings">Vizier-like expression for strings</a></h2>

<h3>Overview</h3>

<p><strong>Note:</strong> Contrary to what Vizier does, the default on string
expressions on this site is to match expressions literally (i.e., the default
operator is == rather than ~).</p>

<p>Some of the operators below work on <em>patterns</em>.  A pattern 
contains the meta characters [, ], *, and ?; all others are "normal" 
characters matched literally.  The * matches zero or more characters, the
? exactly one; characters in square brackets match any character enumerated 
within them.  You can use ranges like "A-Z" within square brackets.  If the 
first character in the square brackets is a caret (<code>^</code>), all 
characters except the ones listed are matched.</p>

<p>The following operators can be used when matching strings -- when we talk 
about literals as operands, metacharacter interpretation is suppressed (i.e.,
the strings are matched literally), otherwise we talk about patterns.</p>

<p>Note that both patterns and literally interpreted strings must match
the <em>whole</em> data field.  This is substantially different from the
usual regular expression engines (but corresponds to what you may know 
from filename patterns).</p>

<ul>
<li><code>==</code> -- matches if your input matches the entire input 
field literally,
i.e., preserving case.  This is the default when no operator is given, but it
may be necessary to use the operator if, e.g., your pattern would be interpreted
as an expression.</li>
<li><code>=~</code> -- Like ==, but ignoring case.</li>
<li><code>~</code> -- selects pattern matches of operand ignoring case.</li>
<li><code>=</code> -- case-sensitive version of <code>~</code>.</li>
<li><code>!~</code> -- reversal of <code>~</code> (i.e., matches when 
	<code>~</code> doesn't).</li>
<li><code>!</code> -- reversal of <code>=</code>.</li>
<li><code>!=</code> -- selects all but literal matches of the operand.</li>
<li><code>&gt;=</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&lt;</code> 
-- selects strings larger or equal, larger, etc., than the operand.  Note that
comparisons are done case-insensitively on this site.  This, however, is
considered a bug that might be fixed when we upgrade our database.</li>
<li><code>=,</code> and <code>=|</code> -- these start enumerations, i.e.,
they match when a literal in the following list is matched.
There are two versions of these so you can include either the comma or the
vertical bar in your literals.  If you need both, you are out of luck.</li>
</ul>

<h3>Examples</h3>

<p>Here is a table of expressions and their matches:</p>

<style type="text/css">
<!--
table#vizstringtable {
	border:2px solid gray; 
	border-collapse: collapse;
	width: 100%;
}

#vizstringtable * td {
	border: 1px solid gray;
	padding: 2pt;
	text-align: center;
}

#vizstringtable * th {
	padding: 4pt;
	text-align: center;
-->
</style>

<table id="vizstringtable">
		<tr><th>Expression</th><th colspan="9">Data</th></tr>
		<tr><td></td><td>M4e</td><td>M4ep</td><td>m4e</td><td>A4p</td><td>O4p</td><td>M*</td><td>m|a</td><td>x,a</td><td>=x</td></tr>
		<tr><td>M4e</td><td>X</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
		<tr><td>=x</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
		<tr><td>== =x</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>X</td></tr>
		<tr><td>!= =x</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>&nbsp;</td></tr>
		<tr><td>==M4e</td><td>X</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
		<tr><td>=~m4e</td><td>X</td><td>&nbsp;</td><td>X</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
		<tr><td>=~m4</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
		<tr><td>~*</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td></tr>
		<tr><td>~m*</td><td>X</td><td>X</td><td>X</td><td>&nbsp;</td><td>&nbsp;</td><td>X</td><td>X</td><td>&nbsp;</td><td>&nbsp;</td></tr>
		<tr><td>M*</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>X</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
		<tr><td>!~m*</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>X</td><td>X</td><td>&nbsp;</td><td>&nbsp;</td><td>X</td><td>X</td></tr>
		<tr><td>~*p</td><td>&nbsp;</td><td>X</td><td>&nbsp;</td><td>X</td><td>X</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
		<tr><td>!~*p</td><td>X</td><td>&nbsp;</td><td>X</td><td>&nbsp;</td><td>&nbsp;</td><td>X</td><td>X</td><td>X</td><td>X</td></tr>
		<tr><td>~?4p</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>X</td><td>X</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
		<tr><td>~[MO]4[pe]</td><td>X</td><td>&nbsp;</td><td>X</td><td>&nbsp;</td><td>X</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
		<tr><td>=[MO]4[pe]</td><td>X</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>X</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
		<tr><td>&gt;O</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>X</td><td>&nbsp;</td><td>&nbsp;</td><td>X</td><td>X</td></tr>
		<tr><td>&gt;O5</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>X</td><td>X</td></tr>
		<tr><td>&gt;=m</td><td>X</td><td>X</td><td>X</td><td>&nbsp;</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td></tr>
		<tr><td>&lt;m</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>X</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
		<tr><td>=|M4e| O4p| x,a</td><td>X</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>X</td><td>&nbsp;</td><td>&nbsp;</td><td>X</td><td>&nbsp;</td></tr>
		<tr><td>=,x,a,=x,m|a</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>X</td><td>&nbsp;</td><td>X</td></tr>

</table>

<p>Maybe some comments are in order:</p>
<ol>
<li><code>=x</code> matches nothing since the leading = is interpreted as an
operator ("match as pattern case-insensitively"), and there is nothing
matching the pattern x in the sample (in this case , only x and X would match).</li>
<li><code>== =x</code> is the simplest way to search for "=x" -- its analogues
work for all other metacharacters as well.</li>
<li><code>=~m4</code> matches nothing, because the pattern has to match the
<em>entire</em> string, and all strings in the sample have some annexes to
their variations of m4.</code>
<li><code>M*</code> only matches "M*" since the default on our system is
literal matching.  This expression would have behaved completely differently on
Vizier.</li>
</ol>

<h3>Grammar</h3>

<p>The following grammar describes the parsing of string expressions:</p>
<pre>
	simpleOperator   ::= "==" | "!=" | ">=" | ">" | "<=" | "<"
	simpleOperand    ::= Regex(".*")
	simpleExpr       ::= simpleOperator + simpleOperand
	
	commaOperand     ::= Regex("[^,]+")
	barOperand       ::= Regex("[^|]+")
	commaEnum        ::= "=," commaOperand { "," commaOperand }
	exclusionEnum    ::= "!=," commaOperand { "," + commaOperand }
	barEnum          ::= "=|" barOperand { "|" + barOperand }
	enumExpr         ::= exclusionEnum | commaEnum | barEnum

	patLiterals      ::= CharsNotIn("[*?")
	wildStar         ::= "*"
	wildQmark        ::= "?"
	setElems         ::= CharsNotIn("]")
	setSpec          ::= "[" + setElems + "]"
	patElem          ::= setSpec | wildStar | wildQmark | patLiterals
	pattern          ::= patElem { patElem }

	patternOperator  ::= "~" | "=" | "!~" | "!"
	patternExpr      ::= patternOperator pattern

	stringExpr       ::= enumExpr | simpleExpr | patternExpr | nakedExpr
</pre>
</body>
</html>
