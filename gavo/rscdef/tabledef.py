"""
Description and definition of tables.
"""

import itertools
import re
import traceback

from gavo import adql
from gavo import base
from gavo import stc
from gavo import utils
from gavo.base import structure
from gavo.rscdef import column
from gavo.rscdef import common
from gavo.rscdef import group
from gavo.rscdef import mixins
from gavo.rscdef import rmkfuncs
from gavo.rscdef import scripting


MS = base.makeStruct


class DBIndex(base.Structure):
	"""A description of an index in the database.

	The corresponding index will be created after the table is imported.
	"""
	name_ = "index"

	_name = base.UnicodeAttribute("name", default=base.Undefined,
		description="Name of the index (defaults to something computed from"
			" columns; the name of the parent table will be prepended in the DB)", 
			copyable=True)
	_columns = base.StringListAttribute("columns", description=
		"Table columns taking part in the index (must be given even if there"
		" is an expression building the index and mention all columns taking"
		" part in the index generated by it", copyable=True)
	_cluster = base.BooleanAttribute("cluster", default=False,
		description="Cluster the table according to this index?",
		copyable=True)
	_code = base.DataContent(copyable=True, description=
		"Raw SQL specifying an expression the table should be"
		" indexed for.  If not given, the expression will be generated from"
		" columns (which is what you usually want).")
	_method = base.UnicodeAttribute("method", default=None,
		description="The indexing method, like an index type.  If you don't"
			" know what to say here, you don't need it.", copyable=True)

	def completeElement(self, ctx):
		if self.content_ and getattr(ctx, "restricted", False):
			raise base.RestrictedElement("index", hint="Free-form SQL on indices"
				" is not allowed in restricted mode")
		self._completeElementNext(DBIndex, ctx)
		if not self.columns:
			raise base.StructureError("Index without columns is verboten.")
		if self.name is base.Undefined:
			self.name = "%s"%(re.sub("[^\w]+", "_", "_".join(self.columns)))
		if not self.content_:
			self.content_ = "%s"%",".join(self.columns)

	def iterCode(self):
		destTableName = self.parent.getQName()
		usingClause = ""
		if self.method is not None:
			usingClause = " USING %s"%self.method
		yield self.parent.expand("CREATE INDEX %s ON %s%s (%s)"%(
			self.dbname, destTableName, usingClause, self.content_))
		if self.cluster:
			yield self.parent.expand(
				"CLUSTER %s ON %s"%(self.dbname, destTableName))

	def create(self, querier):
		"""creates the index on the parent table if necessary.
		
		querier is an object mixing in the DBMethodsMixin, usually the
		DBTable object the index should be created on.
		"""
		if not querier.hasIndex(self.parent.getQName(), self.dbname):
			if not self.parent.system:
				base.ui.notifyIndexCreation(
					self.parent.expand(self.dbname))
			for statement in self.iterCode():
				querier.query(statement)

	def drop(self, querier):
		"""drops the index if it exists.

		querier is an object mixing in the DBMethodsMixin, usually the
		DBTable object the index possibly exists on.
		"""
		iName = self.parent.expand(self.dbname)
		if querier.hasIndex(self.parent.getQName(), iName):
			querier.query("DROP INDEX %s.%s"%(self.tableDef.rd.schema, iName))

	@property
	def dbname(self):
		return "%s_%s"%(self.parent.id, self.name)


class ColumnTupleAttribute(base.StringListAttribute):
	"""is a tuple of column names.

	In a validate method, it checks that the names actually are in parent's
	fields.
	"""
	def iterParentMethods(self):
		"""adds a getPrimaryIn method to the parent class.

		This function will return the value of the primary key in a row
		passed.  The whole thing is a bit dense in that I want to compile
		that method to avoid having to loop every time it is called.  This
		compilation is done in a descriptor -- ah well, probably it's a waste
		of time anyway.
		"""
		def makeGetPrimaryFunction(instance):
			funcSrc = ('def getPrimaryIn(row):\n'
				'	return (%s)')%(" ".join(['row["%s"],'%name
					for name in getattr(instance, self.name_)]))
			return utils.compileFunction(funcSrc, "getPrimaryIn")

		def getPrimaryIn(self, row):
			try:
				return self.__getPrimaryIn(row)
			except AttributeError:
				self.__getPrimaryIn = makeGetPrimaryFunction(self)
				return self.__getPrimaryIn(row)
		yield "getPrimaryIn", getPrimaryIn

	def validate(self, parent):
		for colName in getattr(parent, self.name_):
			try:
				parent.getColumnByName(colName)
			except base.NotFoundError:
				raise base.ui.logOldExc(base.LiteralParseError(self.name_, colName, 
					hint="Column tuple component %s is not in parent table"%colName))


class ForeignKey(base.Structure):
	"""A description of a foreign key relation between this table and another
	one.
	"""
	name_ = "foreignKey"

	_table = base.UnicodeAttribute("table", default=base.Undefined,
		description="Fully qualified SQL name of the table holding the"
		" key.", copyable=True)
	_source = base.UnicodeAttribute("source", default=base.Undefined,
		description="Comma-separated list of local columns corresponding"
			" to the foreign key.  No sanity checks are performed here.")
	_dest = base.UnicodeAttribute("dest", default=base.NotGiven,
		description="Comma-separated list of columns in the target table"
			" belonging to its key.  No checks for their existence, uniqueness,"
			" etc. are done here.  If not given, defaults to source.")

	def getDescription(self):
		return "%s:%s -> %s:%s"%(self.parent.getQName(), ",".join(self.source), 
			self.table, ".".join(self.dest))

	def _parseList(self, raw):
		return [s.strip() for s in raw.split(",") if s.strip()]

	def onElementComplete(self):
		self.source = self._parseList(self.source)
		if self.dest is base.NotGiven:
			self.dest = self.source
		else:
			self.dest = self._parseList(self.dest)
		self._onElementCompleteNext(ForeignKey)
	
	def create(self, querier):
		if not querier.foreignKeyExists(self.parent.getQName(), self.table,
				self.source, self.dest):
			return querier.query("ALTER TABLE %s ADD FOREIGN KEY (%s)"
				" REFERENCES %s (%s)"
				" ON DELETE CASCADE"
				" DEFERRABLE INITIALLY DEFERRED"%(self.parent.getQName(),
					",".join(self.source), self.table, ",".join(self.dest)))

	def delete(self, querier):
		try:
			constraintName = querier.getForeignKeyName(self.parent.getQName(), 
				self.table, self.source, self.dest)
		except base.DBError:  # key does not exist.
			return
		querier.query("ALTER TABLE %s DROP CONSTRAINT %s"%(self.parent.getQName(), 
			constraintName))


class STCDef(base.Structure):
	"""A definition of a space-time coordinate system using STC-S.
	"""
# Programmatically, you have 
# * compiled -- an AST of the entire specification
# * iterColTypes -- iterates over column name/utype pairs, for the 
#	  embedding table only; all others must not touch it

	name_ = "stc"

	_source = base.DataContent(copyable=True, description="An STC-S string"
		" with column references (using quote syntax) instead of values")

	def completeElement(self, ctx):
		self._completeElementNext(STCDef, ctx)
		try:
			self.compiled = stc.parseQSTCS(self.content_)
		except stc.STCSParseError, msg:
			raise base.ui.logOldExc(base.StructureError(
				"Bad stc definition: %s"%str(msg)))
		self.compiled.stripUnits()
		self._origFields = dict((value.dest, utype) 
			for utype, value in stc.getUtypes(self.compiled)
			if isinstance(value, stc.ColRef))
	
	def iterColTypes(self):
		return self._origFields.iteritems()


class TableDef(base.Structure, base.ComputedMetaMixin, common.RolesMixin,
		common.IVOMetaMixin, base.StandardMacroMixin):
	"""A definition of a table, both on-disk and internal.

	Some attributes are ignored for the in-memory tables, e.g., roles or adql.
	"""
	name_ = "table"

	resType = "table"

	# We don't want to force people to come up with an id for all their
	# internal tables but want to avoid writing default-named tables to
	# the db.  Thus, the default is not a valid sql identifier.
	_id = base.IdAttribute("id", 
		default=base.NotGiven, 
		description="Name of the table (must be SQL-legal for onDisk tables)")

	_cols =  common.ColumnListAttribute("columns",
		childFactory=column.Column, 
		description="Columns making up this table.",
		copyable=True)

	_params = common.ColumnListAttribute("params",
		childFactory=column.Param, 
		description='Param ("global columns") for this table.', 
		copyable=True)

	_viewStatement = base.UnicodeAttribute("viewStatement", 
		default=None,
		description="A single SQL statement to create a view.  Setting this"
		" makes this table a view.  The statement will typically be something"
		" like CREATE VIEW \\\\curTable AS (SELECT \\\\colNames FROM...).", 
		copyable=True)

		# onDisk must not be copyable since queries might copy the tds and havoc
		# would result if the queries were to end up on disk.
	_onDisk = base.BooleanAttribute("onDisk", 
		default=False, 
		description="Table in the database rather than in memory?")  

	_temporary = base.BooleanAttribute("temporary", 
		default=False, 
		description="If this is an onDisk table, make it temporary?"
			"  This is mostly useful for custom cores and such.", 
		copyable=True)

	_adql = base.BooleanAttribute("adql", 
		default=False, 
		description="Should this table be available for ADQL queries?")

	_system = base.BooleanAttribute("system", 
		default=False,
		description="Is this a system table?  If it is, it will not be"
		" dropped on normal imports, and accesses to it will not be logged.")

	_forceUnique = base.BooleanAttribute("forceUnique", 
		default=False, 
		description="Enforce dupe policy for primary key (see dupePolicy)?")

	_dupePolicy = base.EnumeratedUnicodeAttribute("dupePolicy",
		default="check", 
		validValues=["check", "drop", "overwrite"], 
		description= "Handle duplicate rows with identical primary keys manually"
		" by raising an error if existing and new rows are not identical (check),"
		" dropping the new one (drop), or overwriting the old one (overwrite)?")

	_primary = ColumnTupleAttribute("primary", 
		default=(),
		description="Comma separated names of columns making up the primary key.",
		copyable=True)

	_indices = base.StructListAttribute("indices", 
		childFactory=DBIndex,
		description="Indices defined on this table", 
		copyable=True)

	_foreignKeys = base.StructListAttribute("foreignKeys", 
		childFactory=ForeignKey, 
		description="Foreign keys used in this table", 
		copyable=True)

	_groups = base.StructListAttribute("groups",
		childFactory=group.Group,
		description="Groups for columns and params of this table",
		copyable=True)

	_registration = base.StructAttribute("registration",
		default=None,
		childFactory=common.Registration,
		copyable=False,
		description="A registration (to the VO registry) of this table.")

	_properties = base.PropertyAttribute()

	# don't copy stc -- columns just keep the reference to the original
	# stc on copy, and nothing should rely on column stc actually being
	# defined in the parent tableDefs.
	_stcs = base.StructListAttribute("stc", description="STC-S definitions"
		" of coordinate systems.", childFactory=STCDef)

	_rd = common.RDAttribute()
	_mixins = mixins.MixinAttribute()
	_original = base.OriginalAttribute()
	_namePath = common.NamePathAttribute()

	fixupFunction = None

	metaModel = ("title(1), creationDate(1), description(1),"
		"subject, referenceURL(1)")

	@classmethod
	def fromColumns(cls, columns, **kwargs):
		"""returns a TableDef from a sequence of columns.

		You can give additional constructor arguments.  makeStruct is used
		to build the instance, the mixin hack is applied.

		Columns with identical names will be disambiguated.
		"""
		res = MS(cls, 
			columns=common.ColumnList(cls.disambiguateColumns(columns)),
			**kwargs)
		return res
	
	def __iter__(self):
		return iter(self.columns)

	def __contains__(self, name):
		try:
			self.columns.getColumnByName(name)
		except base.NotFoundError:
			return False
		return True

	def completeElement(self, ctx):
		# we want a meta parent as soon as possible, and we always let it
		# be our struct parent
		if (not self.getMetaParent() 
				and self.parent 
				and hasattr(self.parent, "_getMeta")):
			self.setMetaParent(self.parent)

		if self.viewStatement and getattr(ctx, "restricted", False):
			raise base.RestrictedElement("table", hint="tables with"
				" view creation statements are not allowed in restricted mode")

		if self.registration and self.id is base.NotGiven:
			raise base.StructureError("Published tables need an assigned id.")
		if not self.id:
			self._id.feed(ctx, self, utils.intToFunnyWord(id(self)))

		# allow iterables to be passed in for columns and convert them
		# to a ColumnList here
		if not isinstance(self.columns, common.ColumnList):
			self.columns = common.ColumnList(self.columns)
		self._resolveSTC()
		self._completeElementNext(TableDef, ctx)
		self.columns.withinId = self.params.tableName = "table "+self.id

	def validate(self):
		if self.id.upper() in adql.allReservedWords:
			raise base.StructureError("Reserved word %s is not allowed as a table"
				" name"%self.id)
		self._validateNext(TableDef)

	def onElementComplete(self):
		if self.adql:
			self.readRoles = self.readRoles | base.getConfig("db", "adqlRoles")
		self.dictKeys = [c.key for c in self]

		self.indexedColumns = set()
		for index in self.indices:
			for col in index.columns:
				if "\\" in col:
					try:
						self.indexedColumns.add(self.expand(col))
					except (base.Error, ValueError):  # cannot expand yet, ignore
						pass
				else:
					self.indexedColumns.add(col)
		if self.primary:
			self.indexedColumns |= set(self.primary)

		self._defineFixupFunction()

		self._onElementCompleteNext(TableDef)

		if self.registration:
			self.registration.register()

	def getElementForName(self, name):
		"""returns the first of column and param having name name.

		The function raises a StructureError if neiter column nor param with
		name exists; this is for base.parsecontext.resolveNameBased's sake.
		"""
		try:
			return self.columns.getColumnByName(name)
		except base.NotFoundError:
			try:
				return self.params.getColumnByName(name)
			except base.NotFoundError:
				raise base.StructureError("No column or param with name %s with"
					" table %s"%(name, self.id))

	def _resolveSTC(self):
		"""adds STC related attributes to this tables' columns.
		"""
		for stcDef in self.stc:
			for name, type in stcDef.iterColTypes():
				destCol = self.getColumnByName(name)
				if destCol.stc is not None: 
					raise base.LiteralParseError("stc", stcDef.content_,
						hint="Column %s is referenced twice from STC"%name)
				destCol.stc = stcDef.compiled
				destCol.stcUtype = type

	def _defineFixupFunction(self):
		"""defines a function to fix up records from column's fixup attributes.

		This will leave a fixupFunction attribute which will be None if
		no fixups are defined.
		"""
		fixups = []
		for col in self:
			if col.fixup is not None:
				fixups.append((col.name, col.fixup))
		if fixups:
			assignments = []
			for key, expr in fixups:
				expr = expr.replace("___", "row['%s']"%key)
				assignments.append("  row['%s'] = %s"%(key, expr))
			source = self.expand(
				"def fixup(row):\n%s\n  return row"%("\n".join(assignments)))
			self.fixupFunction = rmkfuncs.makeProc("fixup", source,
				"", None)

	def getQName(self):
		if self.temporary:
			return self.id
		else:
			if self.rd is None:
				raise base.Error("TableDefs without resource descriptor"
					" have no qualified names")
			return "%s.%s"%(self.rd.schema, self.id)

	def validateRow(self, row):
		"""checks that row is complete and complies with all known constraints on
		the columns

		The function raises a ValidationError with an appropriate message
		and the relevant field if not.
		"""
		for column in self:
			if column.key not in row:
				raise base.ValidationError("Column %s missing"%column.name,
					column.name, row, hint="The table %s has a column named '%s',"
					" but the input row %s does not give it.  This typically means"
					" bad input or a rowmaker failing on some corner case."%(
						self.id, column.name, row))
			try:
				column.validateValue(row[column.name])
			except base.ValidationError, ex:
				ex.row = row
				raise

	def getFieldIndex(self, fieldName):
		"""returns the index of the field named fieldName.
		"""
		return self.columns.getFieldIndex(fieldName)

	def getParamByName(self, name):
		return self.params.getColumnByName(name)

	def getColumnByName(self, name):
		return self.columns.getColumnByName(name)

	def getColumnById(self, id):
		return self.columns.getColumnById(id)

	def getColumnsByUCD(self, ucd):
		return self.columns.getColumnsByUCD(ucd)

	def getColumnByUCD(self, ucd):
		return self.columns.getColumnByUCD(ucd)

	def getColumnByUCDs(self, *ucds):
		return self.columns.getColumnByUCDs(*ucds)
	
	def getColumnsByUCDs(self, *ucds):
		res = []
		for ucd in ucds:
			res.extend(self.columns.getColumnsByUCD(ucd))
		return res

	def getProductColumns(self):
		"""returns the names of the columns containing products.

		They are identified by the presence of a type=product display hint.
		"""
		res = []
		for col in self:
			if col.displayHint.get("type")=="product":
				res.append(col.name)
		return res

	def makeRowFromTuple(self, dbTuple):
		"""returns a row (dict) from a row as returned from the database.
		"""
		preRes = dict(itertools.izip(self.dictKeys, dbTuple))
		if self.fixupFunction:
			return self.fixupFunction(preRes)
		return preRes

	def getDefaults(self):
		"""returns a mapping from column names to defaults to be used when
		making a row for this table.
		"""
		defaults = {}
		for col in self:
			if col.values:
				defaults[col.name] = col.values.default
			elif not col.required:
				defaults[col.name] = None
		return defaults
				
	def getSTCDefs(self):
		"""returns a set of all STC specs referenced in this table as ASTs.
		"""
		# Do not use our stc attribute -- the columns may come from different
		# tables and carry stc from there.
		stcObjects = set(col.stc for col in self)
		if None in stcObjects: 
			stcObjects.remove(None)
		return stcObjects

	def getNote(self, noteTag):
		"""returns the table note meta value for noteTag.

		This will raise a NotFoundError if we don't have such a note.

		You will not usually use this to retrieve meta items since columns
		have the meta values in their note attributes.  Columns, of course,
		use this to get their note attribute value.
		"""
		mi = self.getMeta("note") or []
		for mv in mi:
			if mv.tag==noteTag:
				return mv
		else:
			raise base.NotFoundError(noteTag, what="note tag", 
				within="table %s"%self.id)

	def getURL(self, rendName, absolute=True):
		basePath = "%s__system__/dc_tables/show/tableinfo/%s"%(
			base.getConfig("web", "nevowRoot"),
			self.getQName())
		if absolute:
			basePath = base.getConfig("web", "serverURL")+basePath
		return basePath

	def macro_colNames(self):
		"""returns an SQL-ready list of column names of this table.
		"""
		return ", ".join(c.name for c in self.columns)

	def macro_curtable(self):
		"""returns the qualified name of the current table.
		"""
		return self.getQName()
	
	def macro_qName(self):
		"""returns the qualified name of the current table.
		"""
		return self.getQName()
	
	def macro_tablename(self):
		"""returns the unqualified name of the current table.
		"""
		return self.id

	def macro_nameForUCD(self, ucd):
		"""returns the (unique!) name of the field having ucd in this table.

		If there is no or more than one field with the ucd in this table,
		we raise a ValueError.
		"""
		return self.getColumnByUCD(ucd).name

	def macro_nameForUCDs(self, ucds):
		"""returns the (unique!) name of the field having one
		of ucds in this table.

		Ucds is a selection of ucds separated by vertical bars
		(|).  The rules for when this raises errors are so crazy
		you don't want to think about them.  This really is
		only intended for cases where "old" and "new" standards
		are to be supported, like with pos.eq.*;meta.main and
		POS_EQ_*_MAIN.

		If there is no or more than one field with the ucd in
		this table, we raise an exception.
		"""
		return self.getColumnByUCDs(*(s.strip() for s in ucds.split("|"))).name

	@staticmethod
	def disambiguateColumns(columns):
		"""returns a sequence of columns without duplicate names.
		"""
		newColumns, seenNames = [], set()
		for c in columns:
			while c.name in seenNames:
				c.name = c.name+"_"
			newColumns.append(c)
			seenNames.add(c.name)
		return newColumns


class FieldRef(base.Structure):
	"""A reference to a column in a table definition using the table's
	id and the column name.
	"""
	name_ = "fieldRef"
	_srcTable = base.ReferenceAttribute("table", forceType=TableDef,
		description="Reference to the table the field comes from.",
		default=base.Undefined)
	_srcCol = base.UnicodeAttribute("column", default=base.Undefined,
		description="Column name within the referenced table.")

	def onElementComplete(self):
		self._onElementCompleteNext(FieldRef)
		if not self.column in self.table:
			raise base.StructureError("No field '%s' in table %s"%(
				self.column, self.table.getQName()))

	def getColumn(self):
		return self.table.getColumnByName(self.column)

	def getQName(self):
		name = "%s.%s"%(self.table.getQName(), self.column)
		if "\\" in name:
			name = self.expand(name)
		return name


class SimpleView(base.Structure, base.MetaMixin):
	"""A simple way to define a view over some tables.

	To define a view in this way, you add fieldRef elements, giving
	table ids and column names.  The view will be a natural join of
	all tables involved.

	For more complex views, use a normal table with a viewStatement.

	These elements can be referred to like normal tables (internally, they
	are replaced by TableDefs when they are complete).
	"""
	name_ = "simpleView"

	_rd = common.RDAttribute()
	# force an id on those
	_id = base.IdAttribute("id", default=base.Undefined, description=
		"Name of the view (must be SQL-legal)")
	_cols = base.StructListAttribute("colRefs", childFactory=FieldRef,
		description="References to the fields making up the natural join"
		" of the simple view.")

	def onElementComplete(self):
		self._onElementCompleteNext(SimpleView)
		raise base.Replace(self.getTableDef(), newName="tables")

	def _getDDL(self):
		tableNames = set(c.table.getQName() for c in self.colRefs)
		columnNames = [c.getQName() for c in self.colRefs]
		return "CREATE VIEW %s.%s AS (SELECT %s FROM %s)"%(
			self.rd.schema,
			self.id,
			",".join(columnNames),
			" NATURAL JOIN ".join(tableNames))

	def getTableDef(self):
		"""returns a TableDef for the view.
		"""
		return MS(TableDef, parent_=self.parent, id=self.id, 
			onDisk=True, columns=[c.getColumn() for c in self.colRefs],
			viewStatement=self._getDDL())


def makeTDForColumns(name, cols, **moreKWs):
	"""returns a TableDef object named names and having the columns cols.

	cols is some sequence of Column objects.  You can give arbitrary
	table attributes in keyword arguments.
	"""
	kws = {"id": name, "columns": common.ColumnList(cols)}
	kws.update(moreKWs)
	return base.makeStruct(TableDef, **kws)
